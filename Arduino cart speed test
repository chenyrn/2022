/*speedtest.c*/
/*PID control and speed test*/
#include <Servo.h>
Servo myservo;
int Left_digital=4;     //左电机正极
int Left_analog=6;     //左电机负极

int Right_digital=7;    // 右电机正极
int Right_analog=5;    // 右电机正极

int Ultrasonic_Echo = A3;  // Echo回声脚
int Ultrasonic_Trig =A2;  //  Trig 超声波触发脚
const int interrupt0 = 2;     	//external interrupt0___pin2

float distance = 0;     // 距离
float rdistance = 0;
float ldistance = 0;
float distance_0 = 0;
float d_error = 0;
float d_error0 = 0;
float P = 3;
float I = 0.005;
float D = 0.5;
float distance_s = 0;
int motorspeed = 0;
unsigned long  pwm_count;
unsigned long  pwm_count0;
unsigned long  pwm_count1;
unsigned long  num;
unsigned long time0=0;
unsigned long time1=0;
unsigned long delta_time=0;

int servopin=10;//定义数字接口5 连接伺服舵机信号线

void setup() {
    // put your setup code here, to run once:
    Serial.begin(9600);     // 初始化串口
  //初始化电机驱动IO为输出方式
    pinMode(Right_digital,OUTPUT); 		
    pinMode(Left_digital,OUTPUT); 		
    pinMode(Right_analog,OUTPUT); 		
    pinMode(Left_analog,OUTPUT); 		
  //初始化超声波引脚
    pinMode(Ultrasonic_Echo, INPUT);    // 定义超声波输入脚位
    pinMode(Ultrasonic_Trig, OUTPUT);  // 定义超声波输出脚位
    pinMode(interrupt0, INPUT);    
    pinMode(servopin,OUTPUT);//设定舵机接口为输出接口
    myservo.attach(servopin);
    myservo.write(93);
    delay(20);
    attachInterrupt(0, pwmcnt, FALLING);

}
void measure_distance() //测量前方距离
{ 
    myservo.write(93);
    delay(20);
    digitalWrite(Ultrasonic_Trig, LOW);   
    delayMicroseconds(2);
    digitalWrite(Ultrasonic_Trig, HIGH); 
    delayMicroseconds(10);
    digitalWrite(Ultrasonic_Trig, LOW);   
    float timee = pulseIn(Ultrasonic_Echo, HIGH); 
    distance =timee*1.7/100;
    if(distance>400)
    {
      distance=400;
    }
}

void forward(int f)
{   //前进
        digitalWrite(Right_digital,HIGH);
        digitalWrite(Left_digital,HIGH);
        analogWrite(Right_analog,f);
        analogWrite(Left_analog,f);
}
void backward(int f)
{   //后退
    digitalWrite(Right_digital,LOW);
    digitalWrite(Left_digital,LOW);
    analogWrite(Right_analog,f);
    analogWrite(Left_analog,f);
}
void brake(int br)
{   //停车
    digitalWrite(Right_digital,HIGH);
    digitalWrite(Left_digital,HIGH);
    analogWrite(Right_analog,0);
    analogWrite(Left_analog,0);
    delay(br * 100);
}
/*void turn_right(int r)
{   //右转
    digitalWrite(Right_digital,HIGH);
    digitalWrite(Left_digital,HIGH);
    analogWrite(Right_analog,0);
    analogWrite(Left_analog,150);
    delay(r * 50);
}
void turn_left(int c) //左转
{
  digitalWrite(Right_digital,HIGH);
  digitalWrite(Left_digital,HIGH);
  analogWrite(Right_analog,150);
  analogWrite(Left_analog,0);
  delay(c * 50);
}*/
void cartspeed()
{    //速度控制
    float d_distance,d_error;
    d_error=distance-20;
    d_distance = d_error-d_error0;
    distance_s = d_error + distance_s;
    motorspeed = P*d_error + I*distance_s + D*d_distance;
    d_error0 = d_error;
    if(motorspeed>200)
    {
      motorspeed=200;
    }
    else if(motorspeed<-200)
    {
      motorspeed=-200;
    }
}

void pwmcnt()
{
    pwm_count++;
}

void speedtest()
{
    time1=micros();//读出当前时间us
    pwm_count1=pwm_count;//读出码盘计数
    
    num=pwm_count1-pwm_count0;//计算码盘转过的格数num
    pwm_count0=pwm_count1;
          
    delta_time=time1-time0;//计算出转过num格的时间us
    time0=time1;
        
    Serial.print(time1);
    Serial.print("\t");
    Serial.print(delta_time);
    Serial.print("\t");
    Serial.print(distance);
    Serial.print("\t");
    Serial.println(num);

}

void loop() 
{
  // put your main code here, to run repeatedly:
     measure_distance();
     speedtest();
     if (distance > 30)
     {
       cartspeed();
       if(motorspeed>=0)
        {
         forward(motorspeed);
        }
        else
        {
          backward(-motorspeed);
        }
        
     }
     else
       {
          brake(2);
       }
}
